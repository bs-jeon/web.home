{"version":3,"sources":["components/header/header.js","components/wrapper/wrapper.js","components/map/map.js","aws/post.js","viewer/main/main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Wrapper","children","NaverMapMarkers","props","window","naver","maps","data","stationInfo","undefined","station_list","map","station","index","console","log","NaverMapView","JSON","stringify","mapDivId","style","width","height","defaultCenter","lat","lng","defaultZoom","MapLoader","ncpClientId","process","error","loading","getStationInfo","request","method","url","headers","axios","getCurrentInfo","jArrayStationInfo","uniqueid_str","MainViewer","awsStationInfo","a","setState","fetching","pcpStationInfo","aws","post_getStationInfo","resp_getStationInfo","Array","resultCode","result","i","length","jObject","uniqueID","push","Promise","all","post_getPcpInfo","resp_getCurrentInfo","state","this","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2c204efd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\n\r\nconst Header = () => (\r\n    <div className=\"Header\">People Count Dashboard</div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport './wrapper.css';\r\n\r\nconst Wrapper = ({children}) => {\r\n    return (\r\n        <div className=\"Wrapper\">{children}</div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React from 'react'\r\nimport {Marker, NaverMap, RenderAfterNavermapsLoaded} from 'react-naver-maps'\r\n\r\nfunction NaverMapMarkers(props) {\r\n  const navermaps = window.naver.maps;\r\n  const data = props.stationInfo;\r\n\r\n  if (data !== undefined) {\r\n    const station_list = data.map( (station, index) => \r\n    // (\r\n    //   console.log(station.uniqueID)\r\n    // ));\r\n      (<Marker\r\n        key={index}\r\n        title={JSON.stringify(station)}\r\n        position={new navermaps.LatLng(station.loc_lat, station.loc_lon)}\r\n        animation={0}\r\n        onClick={() => {alert(JSON.stringify(station));}}\r\n      />));\r\n\r\n      console.log(station_list);\r\n\r\n      return (\r\n        <div>{station_list}</div>\r\n      // <div><Marker\r\n      //   key={1*station.uninqueID}\r\n      //   title={station.uninqueID}\r\n      //   position={new navermaps.LatLng(1*station.loc_lat, 1*station.loc_lon)}\r\n      //   animation={0}\r\n      //   onClick={() => {alert('여기는 N서울타워입니다.');}}\r\n      // /></div>);\r\n      );\r\n  } else {\r\n    return (<div></div>);\r\n  }\r\n}\r\n\r\nfunction NaverMapView(props) {\r\n    const navermaps = window.naver.maps;\r\n    console.log(\"NaverMapView\"+JSON.stringify(props.stationInfo));\r\n    return (\r\n        <NaverMap\r\n            mapDivId={'maps-getting-started-uncontrolled'} // default: react-naver-map\r\n            style={{\r\n                width: '100%', // 네이버지도 가로 길이\r\n                height: '85vh' // 네이버지도 세로 길이\r\n            }}\r\n            defaultCenter={{ lat: 37.554722, lng: 126.970833 }} // 지도 초기 위치\r\n            defaultZoom={13} // 지도 초기 확대 배율\r\n        >\r\n            < NaverMapMarkers stationInfo = {props.stationInfo}/>\r\n        </NaverMap>\r\n  );\r\n}\r\n\r\nfunction MapLoader(props) {\r\n    const envNcpClientId = process.env.REACT_APP_NAVER_API_KEY;\r\n\r\n    return (\r\n        <RenderAfterNavermapsLoaded\r\n          ncpClientId={envNcpClientId}// 자신의 네이버 계정에서 발급받은 Client ID\r\n          error={<p>Maps Load Error</p>}\r\n          loading={<p>Maps Loading...</p>}\r\n        >\r\n          <NaverMapView \r\n          stationInfo = {props.stationInfo}/>\r\n        </RenderAfterNavermapsLoaded>\r\n      );\r\n}\r\n\r\nexport default MapLoader;","import axios from 'axios';\r\n\r\nexport function getStationInfo() {\r\n    const aws_url = 'https://pf2g60j2w2.execute-api.ap-northeast-2.amazonaws.com/prod/station/information/';\r\n    let request = {\r\n        method: 'POST',\r\n        url: aws_url,\r\n        headers: {\r\n            'x-api-key': 'UaW7RafsoD1GOdpYzsNntajSMHR3AmngKtPDPJqa',\r\n            'Content-Type': 'application/json; charset=utf-8',\r\n        },\r\n        data: {\r\n            'type': 'station'\r\n        }\r\n    };\r\n\r\n    console.log(request);\r\n    return axios(request);\r\n}\r\n\r\n// Logger.I(\"requestMonthlyAve : now - requestTime = \"+ (now-requestTime));\r\n//         if(now > requestTime) {\r\n//             Uri uri = new Uri.Builder()\r\n//                     .scheme(\"https\")\r\n//                     .authority(\"pf2g60j2w2.execute-api.ap-northeast-2.amazonaws.com\")\r\n//                     .appendPath(\"prod\")\r\n//                     // will be changed\r\n//                     .appendPath(\"station\")\r\n//                     .appendPath(\"period\")\r\n//                     .appendPath(\"daily\")\r\n//                     .build();\r\n\r\n//             JSONArray data_list = new JSONArray();\r\n//             JSONObject id = new JSONObject();\r\n//             id.put(\"uniqueID\", monthlyData.Uid);\r\n//             data_list.put(id);\r\n//             String YYMMDD = getDateTime();\r\n//             JSONObject body = new JSONObject();\r\n//             body.put(\"uniqueID_list\", data_list);\r\n//             body.put(\"currentTime\",YYMMDD);\r\n//             body.put(\"searchYear\",monthlyData.Year);\r\n//             body.put(\"searchMonth\",monthlyData.Month);\r\nexport function getMonthlyInfo(jArrayStationInfo) {\r\n    const aws_url = 'https://pf2g60j2w2.execute-api.ap-northeast-2.amazonaws.com/prod/station/period/daily';\r\n    //const uniqueid_str = [{\"uniqueID\":\"5\"},{\"uniqueID\":\"7\"}];\r\n    const uniqueid_str = jArrayStationInfo;\r\n\r\n    let request = {\r\n        method: 'POST',\r\n        url: aws_url,\r\n        headers: {\r\n            'x-api-key': 'UaW7RafsoD1GOdpYzsNntajSMHR3AmngKtPDPJqa',\r\n            'Content-Type': 'application/json; charset=utf-8',\r\n        },\r\n        data: {\r\n            'uniqueID_list': uniqueid_str,\r\n            \"currentTime\": \"200921\",\r\n            \"searchYear\": \"2020\",\r\n            \"searchMonth\": \"9\",\r\n        }\r\n    };\r\n\r\n    console.log(\"getMonthlyInfo:\"+request);\r\n    return axios(request);\r\n}\r\n\r\nexport function getWeekInfo() {\r\n\r\n}\r\n\r\nexport function getDayInfo() {\r\n    \r\n}\r\n// Uri uri = new Uri.Builder()\r\n//                     .scheme(\"https\")\r\n//                     .authority(\"pf2g60j2w2.execute-api.ap-northeast-2.amazonaws.com\")\r\n//                     .appendPath(\"prod\")\r\n//                     // will be changed\r\n//                     .appendPath(\"station\")\r\n//                     .appendPath(\"map\")\r\n//                     .appendPath(\"timestatistic\")\r\n//                     .build();\r\n\r\n//             JSONArray data_list = new JSONArray();\r\n//             for (int i = 0; i < uId.size(); i++) {\r\n//                 JSONObject body = new JSONObject();\r\n//                 body.put(\"uniqueID\", uId.get(i));\r\n//                 //            body.put(\"currentTime\", getDateTime());\r\n//                 data_list.put(body);\r\n//             }\r\n\r\n//             JSONObject itemList = new JSONObject();\r\n//             itemList.put(\"uniqueID_list\", data_list);\r\n//             itemList.put(\"time_type\", \"min_avg\");\r\n//             itemList.put(\"min\", \"10\");\r\n\r\nexport function getCurrentInfo(jArrayStationInfo) {\r\n    const aws_url = 'https://pf2g60j2w2.execute-api.ap-northeast-2.amazonaws.com/prod/station/map/timestatistic';\r\n    //const uniqueid_str = [{\"uniqueID\":\"5\"},{\"uniqueID\":\"7\"}];\r\n    const uniqueid_str = jArrayStationInfo;\r\n\r\n    console.log(uniqueid_str)\r\n\r\n    let request = {\r\n        method: 'POST',\r\n        url: aws_url,\r\n        headers: {\r\n            'x-api-key': 'UaW7RafsoD1GOdpYzsNntajSMHR3AmngKtPDPJqa',\r\n            'Content-Type': 'application/json; charset=utf-8',\r\n        },\r\n        data: {\r\n            'uniqueID_list': uniqueid_str,\r\n            \"time_type\": \"min_avg\",\r\n            \"min\": \"10\"\r\n        }\r\n    };\r\n\r\n    console.log(\"getCurrentInfo\"+request);\r\n    return axios(request);\r\n}\r\n\r\n\r\n\r\n//=========================================================================================\r\n\r\n// Uri uri = new Uri.Builder()\r\n//                     .scheme(\"https\")\r\n//                     .authority(\"pf2g60j2w2.execute-api.ap-northeast-2.amazonaws.com\")\r\n//                     .appendPath(\"prod\")\r\n//                     // will be changed\r\n//                     .appendPath(\"station\")\r\n//                     .appendPath(\"map\")\r\n//                     .appendPath(\"timestatistic\")\r\n//                     .build();\r\n\r\n//             JSONArray data_list = new JSONArray();\r\n//             for (int i = 0; i < uId.size(); i++) {\r\n//                 JSONObject body = new JSONObject();\r\n//                 body.put(\"uniqueID\", uId.get(i));\r\n//                 //            body.put(\"currentTime\", getDateTime());\r\n//                 data_list.put(body);\r\n//             }\r\n\r\n//             JSONObject itemList = new JSONObject();\r\n//             itemList.put(\"uniqueID_list\", data_list);\r\n//             itemList.put(\"time_type\", \"hour_sum\");\r\n//             itemList.put(\"hour\", \"1\");\r\n//=========================================================================================\r\n\r\n// Logger.I(\" requestDailyAve: now - requestTime = \"+ (now-requestTime));\r\n//         if(now > requestTime) {\r\n//             Uri uri = new Uri.Builder()\r\n//                     .scheme(\"https\")\r\n//                     .authority(\"pf2g60j2w2.execute-api.ap-northeast-2.amazonaws.com\")\r\n//                     .appendPath(\"prod\")\r\n//                     // will be changed\r\n//                     .appendPath(\"station\")\r\n//                     .appendPath(\"period\")\r\n//                     .appendPath(\"weeklyhour\")\r\n//                     .build();\r\n\r\n//             JSONArray data_list = new JSONArray();\r\n//             JSONObject id = new JSONObject();\r\n//             id.put(\"uniqueID\", uId);\r\n//             data_list.put(id);\r\n//             JSONObject body = new JSONObject();\r\n//             body.put(\"uniqueID_list\", data_list);\r\n// //        body.put(\"currentTime\",YYMMDD);\r\n\r\n\r\n// Logger.I(\"requestWeeklyAve : now - requestTime = \"+ (now-requestTime));\r\n//         if(now > requestTime) {\r\n//             String[] weekDay ={ \"Mon\", \"Tue\", \"Wed\",\"Tur\",\"Fri\",\"Sat\",\"Sun\"};\r\n//             Uri uri = new Uri.Builder()\r\n//                     .scheme(\"https\")\r\n//                     .authority(\"pf2g60j2w2.execute-api.ap-northeast-2.amazonaws.com\")\r\n//                     .appendPath(\"prod\")\r\n//                     // will be changed\r\n//                     .appendPath(\"station\")\r\n//                     .appendPath(\"period\")\r\n//                     .appendPath(\"dayofweek\")\r\n//                     .build();\r\n\r\n//             JSONObject body = new JSONObject();\r\n//             body.put(\"uniqueID\", uId);\r\n//             body.put(\"currentTime\", getDateTime());\r\n//             JSONArray data_list = new JSONArray();\r\n//             data_list.put(body);\r\n\r\n//             JSONObject itemList = new JSONObject();\r\n//             itemList.put(\"uniqueID_list\", data_list);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { Wrapper, MapLoader } from '../../components';\r\nimport * as aws from '../../aws/post';\r\n\r\nclass MainViewer extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n\r\n        //Initial component state\r\n        this.state = {\r\n            fetching: false,\r\n            pcpStationInfo: []\r\n        }\r\n    }\r\n\r\n    awsStationInfo = async () => {\r\n\r\n        this.setState({\r\n            fetching: true,\r\n            pcpStationInfo: []\r\n        });\r\n\r\n        const post_getStationInfo = await aws.getStationInfo();\r\n        const resp_getStationInfo = await post_getStationInfo.data;\r\n        let jArrayStationInfo = new Array();\r\n        if (resp_getStationInfo.resultCode === '200') {\r\n            console.log(resp_getStationInfo.result);\r\n\r\n            for (let i = 0; i < resp_getStationInfo.result.length; i++) {\r\n                let jObject = {\r\n                    \"uniqueID\": resp_getStationInfo.result[i].uniqueID\r\n                }\r\n                jArrayStationInfo.push(jObject);\r\n                console.log(resp_getStationInfo.result[i]);\r\n            }\r\n\r\n            const post_getPcpInfo = await Promise.all ([\r\n                aws.getCurrentInfo(jArrayStationInfo),\r\n                // aws.getMonthlyInfo(jArrayStationInfo)\r\n            ]);\r\n\r\n            const resp_getCurrentInfo = post_getPcpInfo[0].data;\r\n            this.setState ({\r\n                pcpStationInfo: resp_getCurrentInfo,\r\n            })\r\n            console.log(resp_getCurrentInfo);\r\n        }\r\n        this.setState({\r\n            fetching: false,\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.awsStationInfo();\r\n    }\r\n\r\n    render() {\r\n\r\n        const {fetching, pcpStationInfo} = this.state;\r\n\r\n        return (\r\n            <Wrapper>\r\n                <MapLoader \r\n                stationInfo = {pcpStationInfo.result}/>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainViewer;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Header } from './components';\r\nimport { MainViewer } from './viewer' \r\n\r\nclass App extends Component{\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <MainViewer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}