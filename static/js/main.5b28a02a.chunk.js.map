{"version":3,"sources":["logo.svg","NaverMap.js","pcpAws.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NaverMapApi","navermaps","window","naver","maps","mapDivId","style","width","height","defaultCenter","lat","lng","defaultZoom","key","title","position","LatLng","animation","onClick","alert","NaverMapLoading","ncpClientId","process","error","loading","a","request","method","url","headers","data","console","log","axios","response","responseOk","status","statusText","App","state","AWS_QueryState","awsRestApi","className","NaverMap","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,8JCG3C,SAASC,IACL,IAAMC,EAAYC,OAAOC,MAAMC,KAC/B,OACI,kBAAC,IAAD,CACIC,SAAU,oCACVC,MAAO,CACHC,MAAO,OACPC,OAAQ,QAEZC,cAAe,CAAEC,IAAK,UAAWC,IAAK,YACtCC,YAAa,IAEb,kBAAC,IAAD,CACIC,IAAK,EACLC,MAAO,4BACPC,SAAU,IAAId,EAAUe,OAAO,UAAW,YAC1CC,UAAW,EACXC,QAAS,WAAOC,MAAM,uEAoBvBC,MAdf,WAEI,OACI,kBAAC,IAAD,CACEC,YAHiBC,aAIjBC,MAAO,8CACPC,QAAS,+CAET,kBAACxB,EAAD,Q,sFC7BH,kCAAAyB,EAAA,6DAECC,EAAU,CACVC,OAAQ,OACRC,IAHM,wFAINC,QAAS,CACL,YAAa,2CACb,eAAgB,mCAEpBC,KAAM,CACF,KAAQ,YAIhBC,QAAQC,IAAIN,GAdT,SAekBO,IAAMP,GAfxB,cAeCQ,EAfD,OAgBCC,EAAaD,GAAgC,MAApBA,EAASE,QAA0C,OAAxBF,EAASG,WAhB9D,SAkBeH,EAASJ,KAlBxB,OAkBCA,EAlBD,OAmBCK,EACAJ,QAAQC,IAAIF,GAEZC,QAAQC,IAAIE,GAtBb,6C,0BC0BQI,E,4MAvBbC,MAAQ,CACNC,gBAAgB,G,mEDJb,WAAP,wBCQIC,K,+BAIA,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAEC,EAAF,MAEA,oD,GAhBQC,aCMEC,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLQ,QAAQR,MAAMA,EAAMsC,c","file":"static/js/main.5b28a02a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\nimport {Marker, NaverMap, RenderAfterNavermapsLoaded} from 'react-naver-maps'\r\n\r\nfunction NaverMapApi() {\r\n    const navermaps = window.naver.maps;\r\n    return (\r\n        <NaverMap\r\n            mapDivId={'maps-getting-started-uncontrolled'} // default: react-naver-map\r\n            style={{\r\n                width: '100%', // 네이버지도 가로 길이\r\n                height: '85vh' // 네이버지도 세로 길이\r\n            }}\r\n            defaultCenter={{ lat: 37.554722, lng: 126.970833 }} // 지도 초기 위치\r\n            defaultZoom={13} // 지도 초기 확대 배율\r\n        >\r\n            <Marker\r\n                key={1}\r\n                title={'서울타워?'}\r\n                position={new navermaps.LatLng(37.554722, 126.970833)}\r\n                animation={0}\r\n                onClick={() => {alert('여기는 N서울타워입니다.');}}\r\n            />\r\n        </NaverMap>\r\n  );\r\n}\r\n\r\nfunction NaverMapLoading() {\r\n    const envNcpClientId = process.env.REACT_APP_NAVER_API_KEY;\r\n    return (\r\n        <RenderAfterNavermapsLoaded\r\n          ncpClientId={envNcpClientId}// 자신의 네이버 계정에서 발급받은 Client ID\r\n          error={<p>Maps Load Error</p>}\r\n          loading={<p>Maps Loading...</p>}\r\n        >\r\n          <NaverMapApi />\r\n        </RenderAfterNavermapsLoaded>\r\n      );\r\n}\r\n\r\n\r\nexport default NaverMapLoading;","import axios from 'axios';\r\n\r\nlet aws_url = '';\r\nlet body = '';\r\n\r\nexport async function awsRestApi() {\r\n    aws_url = 'https://pf2g60j2w2.execute-api.ap-northeast-2.amazonaws.com/prod/station/information/';\r\n    let request = {\r\n        method: 'POST',\r\n        url: aws_url,\r\n        headers: {\r\n            'x-api-key': 'UaW7RafsoD1GOdpYzsNntajSMHR3AmngKtPDPJqa',\r\n            'Content-Type': 'application/json; charset=utf-8',\r\n        },\r\n        data: {\r\n            'type': 'station'\r\n        }\r\n    };\r\n\r\n    console.log(request);\r\n    let response = await axios(request);\r\n    let responseOk = response && response.status === 200 && response.statusText === 'OK';\r\n\r\n    let data  = await response.data;\r\n    if (responseOk) {\r\n        console.log(data);\r\n    } else {\r\n        console.log(response)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport NaverMapLoading from './NaverMap';\r\nimport {awsRestApi} from './pcpAws'\r\n\r\nclass App extends Component{\r\n\r\n  state = {\r\n    AWS_QueryState: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    awsRestApi();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          < NaverMapLoading />\r\n\r\n          <h1>\r\n            React Web Home\r\n          </h1>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}